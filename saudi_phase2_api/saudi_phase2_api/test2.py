import requests
import hashlib
import json
import sys
import base64
def calculate_sha256_hash(input_string):
    input_bytes = input_string.encode('utf-8')
    sha256_hash = hashlib.sha256()
    sha256_hash.update(input_bytes)
    hash_result = sha256_hash.hexdigest()
    return hash_result

def zatca_call():
        original_string = "0c20a12265c6494684e90e8a50c7c6989a9b2dfa2e099a279e073fd14b490a5f"
        base64_encoded = base64.b64encode(original_string.encode('utf-8')).decode('utf-8')
        print(base64_encoded)
        # sys.exit()
        calculated_hash="0c20a12265c6494684e90e8a50c7c6989a9b2dfa2e099a279e073fd14b490a5f"
        xml="""<?xml version="1.0" ?><Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2">      <cbc:ProfileID>reporting:1.0</cbc:ProfileID>      <cbc:ID>ACC-SINV-2023-00022</cbc:ID>      <cbc:UUID>4106d90c-81e8-11ee-93fd-020017019f27</cbc:UUID>      <cbc:IssueDate>2023-11-09</cbc:IssueDate>      <cbc:IssueTime>12:06:33</cbc:IssueTime>      <cbc:InvoiceTypeCode name="0100000">386</cbc:InvoiceTypeCode>      <cbc:DocumentCurrencyCode>SAR</cbc:DocumentCurrencyCode>      <cbc:TaxCurrencyCode>SAR</cbc:TaxCurrencyCode>      <cbc:LineCountNumeric>1</cbc:LineCountNumeric>      <cac:AdditionalDocumentReference>            <cbc:ID>ICV</cbc:ID>            <cbc:UUID>202300022</cbc:UUID>        </cac:AdditionalDocumentReference>      <cac:AdditionalDocumentReference>            <cbc:ID>PIH</cbc:ID>            <cac:Attachment>                  <cbc:EmbeddedDocumentBinaryObject mimeCode="text/plain">3ut6eDuWN8aRdtP7TUie1vfLJgYaFQ205sLoQFeSmAs=</cbc:EmbeddedDocumentBinaryObject>              </cac:Attachment>        </cac:AdditionalDocumentReference>      <cac:AdditionalDocumentReference>            <cbc:ID>QR</cbc:ID>            <cac:Attachment>                  <cbc:EmbeddedDocumentBinaryObject mimeCode="text/plain">GsiuvGjvchjbFhibcDhjv1886G</cbc:EmbeddedDocumentBinaryObject>              </cac:Attachment>        </cac:AdditionalDocumentReference>      <cac:Signature>            <cbc:ID>urn:oasis:names:specification:ubl:signature:Invoice</cbc:ID>            <cbc:SignatureMethod>urn:oasis:names:specification:ubl:dsig:enveloped:xades</cbc:SignatureMethod>        </cac:Signature>      <cac:AccountingSupplierParty>            <cac:Party>                  <cac:PartyIdentification>                        <cbc:ID schemeID="MLS">12364569</cbc:ID>                    </cac:PartyIdentification>                  <cac:PostalAddress>                        <cbc:StreetName>compstreet</cbc:StreetName>                        <cbc:BuildingNumber>3451</cbc:BuildingNumber>                        <cbc:PlotIdentification>14</cbc:PlotIdentification>                        <cbc:CitySubdivisionName>compsub</cbc:CitySubdivisionName>                        <cbc:CityName>compcity</cbc:CityName>                        <cbc:PostalZone>45623</cbc:PostalZone>                        <cbc:CountrySubentity>comp state</cbc:CountrySubentity>                        <cac:Country>                              <cbc:IdentificationCode>SA</cbc:IdentificationCode>                          </cac:Country>                    </cac:PostalAddress>                  <cac:PartyTaxScheme>                        <cbc:CompanyID>398756478912343</cbc:CompanyID>                        <cac:TaxScheme>                              <cbc:ID>VAT</cbc:ID>                          </cac:TaxScheme>                    </cac:PartyTaxScheme>                  <cac:PartyLegalEntity>                        <cbc:RegistrationName>Husna (Demo)</cbc:RegistrationName>                    </cac:PartyLegalEntity>              </cac:Party>        </cac:AccountingSupplierParty>      <cac:AccountingCustomerParty>            <cac:Party>                  <cac:PartyIdentification>                        <cbc:ID schemeID="SAG">543261789</cbc:ID>                    </cac:PartyIdentification>                  <cac:PostalAddress>                        <cbc:StreetName>my street</cbc:StreetName>                        <cbc:BuildingNumber>1235</cbc:BuildingNumber>                        <cbc:PlotIdentification>my plot number</cbc:PlotIdentification>                        <cbc:CitySubdivisionName>my sub</cbc:CitySubdivisionName>                        <cbc:CityName>mycity</cbc:CityName>                        <cbc:PostalZone>12345</cbc:PostalZone>                        <cbc:CountrySubentity>my sub</cbc:CountrySubentity>                        <cac:Country>                              <cbc:IdentificationCode>SA</cbc:IdentificationCode>                          </cac:Country>                    </cac:PostalAddress>                  <cac:PartyTaxScheme>                        <cac:TaxScheme>                              <cbc:ID>VAT</cbc:ID>                          </cac:TaxScheme>                    </cac:PartyTaxScheme>                  <cac:PartyLegalEntity>                        <cbc:RegistrationName>Grant Plastics Ltd.</cbc:RegistrationName>                    </cac:PartyLegalEntity>              </cac:Party>        </cac:AccountingCustomerParty>      <cac:Delivery>            <cbc:ActualDeliveryDate>2023-11-10</cbc:ActualDeliveryDate>        </cac:Delivery>      <cac:PaymentMeans>            <cbc:PaymentMeansCode>32</cbc:PaymentMeansCode>        </cac:PaymentMeans>      <cac:TaxTotal>            <cbc:TaxAmount currencyID="SAR">50.0</cbc:TaxAmount>            <cac:TaxSubtotal>                  <cbc:TaxableAmount currencyID="SAR">500.0</cbc:TaxableAmount>                  <cbc:TaxAmount currencyID="SAR">50.0</cbc:TaxAmount>                  <cac:TaxCategory>                        <cbc:ID>S</cbc:ID>                        <cbc:Percent>10.0</cbc:Percent>                        <cac:TaxScheme>                              <cbc:ID>VAT</cbc:ID>                          </cac:TaxScheme>                    </cac:TaxCategory>              </cac:TaxSubtotal>        </cac:TaxTotal>      <cac:LegalMonetaryTotal>            <cbc:LineExtensionAmount currencyID="SAR">500.0</cbc:LineExtensionAmount>            <cbc:TaxExclusiveAmount currencyID="SAR">500.0</cbc:TaxExclusiveAmount>            <cbc:TaxInclusiveAmount currencyID="SAR">550.0</cbc:TaxInclusiveAmount>            <cbc:AllowanceTotalAmount currencyID="SAR"/>            <cbc:PayableAmount currencyID="SAR">550.0</cbc:PayableAmount>        </cac:LegalMonetaryTotal>      <cac:TaxTotal>            <cbc:TaxAmount currencyID="SAR"/>        </cac:TaxTotal>      <cac:InvoiceLine>            <cbc:ID>1</cbc:ID>            <cbc:InvoicedQuantity unitCode="Nos">1.0</cbc:InvoicedQuantity>            <cbc:LineExtensionAmount currencyID="SAR">500.0</cbc:LineExtensionAmount>            <cac:TaxTotal>                  <cbc:TaxAmount currencyID="SAR">50.0</cbc:TaxAmount>                  <cbc:RoundingAmount currencyID="SAR">550.0</cbc:RoundingAmount>              </cac:TaxTotal>            <cac:Item>                  <cbc:Name>SKU003</cbc:Name>                  <cac:ClassifiedTaxCategory>                        <cbc:ID>S</cbc:ID>                        <cbc:Percent>10.0</cbc:Percent>                        <cac:TaxScheme>                              <cbc:ID>VAT</cbc:ID>                          </cac:TaxScheme>                    </cac:ClassifiedTaxCategory>              </cac:Item>            <cac:Price>                  <cbc:PriceAmount currencyID="SAR">500.0</cbc:PriceAmount>              </cac:Price>        </cac:InvoiceLine>  </Invoice>"""
        invoice_hash= hashlib.sha256(xml.encode('utf-8')).hexdigest()
        # print("first invoice hash is",invoice_hash)
        invoiceHash=calculate_sha256_hash(xml)
        print(invoiceHash)
        encoded_invoice_hash = base64.b64encode(invoiceHash.encode('utf-8')).decode('utf-8')
        print(encoded_invoice_hash)
        base64_encoded = base64.b64encode(xml.encode("utf-8"))
        base64_decoded = base64_encoded.decode("utf-8")
        # print(base64_decoded)
        url = "https://gw-fatoora.zatca.gov.sa/e-invoicing/developer-portal/compliance/invoices"
        payload = json.dumps({
                            "invoiceHash": invoiceHash,
                            "uuid":"4106d90c-81e8-11ee-93fd-020017019f27",
                            "invoice": base64_decoded
        })
        headers = { 
            'accept': 'application/json',
            'Accept-Language': 'en',
            'Accept-Version': 'V2',
            'Authorization': "Basic VFVsSlJERnFRME5CTTNsblFYZEpRa0ZuU1ZSaWQwRkJaVFJUYUhOMmVXNDNNREo1VUhkQlFrRkJRamRvUkVGTFFtZG5jV2hyYWs5UVVWRkVRV3BDYWsxU1ZYZEZkMWxMUTFwSmJXbGFVSGxNUjFGQ1IxSlpSbUpIT1dwWlYzZDRSWHBCVWtKbmIwcHJhV0ZLYXk5SmMxcEJSVnBHWjA1dVlqTlplRVo2UVZaQ1oyOUthMmxoU21zdlNYTmFRVVZhUm1ka2JHVklVbTVaV0hBd1RWSjNkMGRuV1VSV1VWRkVSWGhPVlZVeGNFWlRWVFZYVkRCc1JGSlRNVlJrVjBwRVVWTXdlRTFDTkZoRVZFbDVUVVJaZUUxNlJURk5la1V3VG14dldFUlVTVEJOUkZsNFRXcEZNVTE2UlRCT2JHOTNVMVJGVEUxQmEwZEJNVlZGUW1oTlExVXdSWGhFYWtGTlFtZE9Wa0pCYjFSQ1YwWnVZVmQ0YkUxU1dYZEdRVmxFVmxGUlRFVjNNVzlaV0d4b1NVaHNhRm95YUhSaU0xWjVUVkpKZDBWQldVUldVVkZFUlhkcmVFMXFZM1ZOUXpSM1RHcEZkMVpxUVZGQ1oyTnhhR3RxVDFCUlNVSkNaMVZ5WjFGUlFVTm5Ua05CUVZSVVFVczViSEpVVm10dk9YSnJjVFphV1dOak9VaEVVbHBRTkdJNVV6UjZRVFJMYlRkWldFb3JjMjVVVm1oTWEzcFZNRWh6YlZOWU9WVnVPR3BFYUZKVVQwaEVTMkZtZERoREwzVjFWVms1TXpSMmRVMU9ielJKUTB0cVEwTkJhVmwzWjFselIwRXhWV1JGVVZOQ1ozcERRbWRMVWl0TlNIZDRTRlJCWWtKblRsWkNRVkZOUmtSRmRHRkhSalZaV0hkNVRGUkplazVJZDNwTVZFVjRUV3BOZWsxU09IZElVVmxMUTFwSmJXbGFVSGxNUjFGQ1FWRjNVRTE2VFhoTlZGbDVUMFJaTlU1RVFYZE5SRUY2VFZFd2QwTjNXVVJXVVZGTlJFRlJlRTFVUVhkTlVrVjNSSGRaUkZaUlVXRkVRV2hoV1ZoU2FsbFRRWGhOYWtWWlRVSlpSMEV4VlVWRWQzZFFVbTA1ZGxwRFFrTmtXRTU2WVZjMWJHTXpUWHBOUWpCSFFURlZaRVJuVVZkQ1FsTm5iVWxYUkRaaVVHWmlZa3RyYlZSM1QwcFNXSFpKWWtnNVNHcEJaa0puVGxaSVUwMUZSMFJCVjJkQ1VqSlpTWG8zUW5GRGMxb3hZekZ1WXl0aGNrdGpjbTFVVnpGTWVrSlBRbWRPVmtoU09FVlNla0pHVFVWUFoxRmhRUzlvYWpGdlpFaFNkMDlwT0haa1NFNHdXVE5LYzB4dWNHaGtSMDVvVEcxa2RtUnBOWHBaVXpsRVdsaEtNRkpYTlhsaU1uaHpUREZTVkZkclZrcFViRnBRVTFWT1JreFdUakZaYTA1Q1RGUkZkVmt6U25OTlNVZDBRbWRuY2tKblJVWkNVV05DUVZGVFFtOUVRMEp1VkVKMVFtZG5ja0puUlVaQ1VXTjNRVmxhYVdGSVVqQmpSRzkyVEROU2VtUkhUbmxpUXpVMldWaFNhbGxUTlc1aU0xbDFZekpGZGxFeVZubGtSVloxWTIwNWMySkRPVlZWTVhCR1lWYzFNbUl5YkdwYVZrNUVVVlJGZFZwWWFEQmFNa1kyWkVNMWJtSXpXWFZpUnpscVdWZDRabFpHVG1GU1ZXeFBWbXM1U2xFd1ZYUlZNMVpwVVRCRmRFMVRaM2hMVXpWcVkyNVJkMHQzV1VsTGQxbENRbEZWU0UxQlIwZElNbWd3WkVoQk5reDVPVEJqTTFKcVkyMTNkV1Z0UmpCWk1rVjFXakk1TWt4dVRtaE1NamxxWXpOQmQwUm5XVVJXVWpCUVFWRklMMEpCVVVSQloyVkJUVUl3UjBFeFZXUktVVkZYVFVKUlIwTkRjMGRCVVZWR1FuZE5RMEpuWjNKQ1owVkdRbEZqUkVGNlFXNUNaMnR5UW1kRlJVRlpTVE5HVVc5RlIycEJXVTFCYjBkRFEzTkhRVkZWUmtKM1RVTk5RVzlIUTBOelIwRlJWVVpDZDAxRVRVRnZSME5EY1VkVFRUUTVRa0ZOUTBFd1owRk5SVlZEU1ZGRVQxQXdaakJFY21oblpVUlVjbFpNZEVwMU9HeFhhelJJU25SbFkyWTFabVpsVWt4blpVUTRZMlZWWjBsblpFSkNUakl4U1RNM2FYTk5PVlZ0VTFGbE9IaFNjRWh1ZDA5NFNXYzNkMDR6V1RKMlZIQnpVR2hhU1QwPTpFcGo2OUdoOFRNTXpZZktsdEx2MW9tWktyaWUwc1A2TEF2YW1iUUZIVGd3PQ==",
            'Content-Type': 'application/json'}
        response = requests.request("POST", url, headers=headers, data=payload)
        print(response.text)
        try:
            response = requests.request("POST", url, headers=headers, data=payload)
            print(response.text )

        except Exception as e:    
            print(str(e)) 
            print("error","NOT_CLEARED")
zatca_call()